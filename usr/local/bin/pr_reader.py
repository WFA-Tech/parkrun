#!/usr/bin/env python
# -*- coding: UTF-8 -*-
#
# generated by wxGlade 0.6.8 on Wed Aug 31 21:57:18 2016
#
import sys, datetime, string
from wxPython.wx import *
import sys
from my_cs1504 import myCS1504

# begin wxGlade: dependencies
import gettext
# end wxGlade

# begin wxGlade: extracode
# end wxGlade


class MyPanel(wxPanel):
    """ GUI for barcode & timer reader """
    def __init__(self, *args, **kwds):
        # begin wxGlade: MyPanel.__init__
        kwds["style"] = wxTAB_TRAVERSAL
        wxPanel.__init__(self, *args, **kwds)
        self.static_line_1 = wxStaticLine(self, wxID_ANY)

        self.__set_properties()
        self.__do_layout()
        # end wxGlade

    def __set_properties(self):
        # begin wxGlade: MyPanel.__set_properties
        pass
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: MyPanel.__do_layout
        grid_sizer_1 = wxGridSizer(3, 3, 0, 0)
        grid_sizer_1.Add(self.static_line_1, 0, wxEXPAND, 0)
        self.SetSizer(grid_sizer_1)
        grid_sizer_1.Fit(self)
        # end wxGlade

# end of class MyPanel
class ParkRunFrame(wxFrame):
    def __init__(self, *args, **kwds):
        # begin wxGlade: ParkRunFrame.__init__
        kwds["style"] = wxCAPTION | wxCLOSE_BOX | wxMINIMIZE_BOX | wxMAXIMIZE_BOX | wxSTAY_ON_TOP | wxSYSTEM_MENU | wxRESIZE_BORDER | wxFRAME_TOOL_WINDOW | wxCLIP_CHILDREN
        wxFrame.__init__(self, *args, **kwds)
        
        # Menu Bar
        self.ParkRunAppFrame_menubar = wxMenuBar()
        self.File = wxMenu()
        self.ParkRunAppFrame_menubar.Append(self.File, _("Files"))
        self.SetMenuBar(self.ParkRunAppFrame_menubar)
        # Menu Bar end
        self.ParkRunAppFrame_statusbar = self.CreateStatusBar(1, 0)
        self.label_1 = wxStaticText(self, wxID_ANY, _("Connect devices in order"))
        self.GetTimer = wxButton(self, wxID_ANY, _("GetTimer"))
        self.label_2 = wxStaticText(self, wxID_ANY, _("Records"), style=wxALIGN_CENTRE)
        self.text_ctrl_records = wxTextCtrl(self, wxID_ANY, "")
        self.GetBarcode = wxButton(self, wxID_ANY, _("GetBarcode"))
        self.label_3 = wxStaticText(self, wxID_ANY, _("Positions"), style=wxALIGN_RIGHT)
        self.text_ctrl_2 = wxTextCtrl(self, wxID_ANY, "")
        self.GetStopwatch = wxButton(self, wxID_ANY, _("GetStopWatch"))
        self.label_5 = wxStaticText(self, wxID_ANY, _("Times"))
        self.text_ctrl_4 = wxTextCtrl(self, wxID_ANY, "")

        self.__set_properties()
        self.__do_layout()

        EVT_BUTTON(self, self.GetTimer.GetId(), self.ReadTimer)
        EVT_BUTTON(self, self.GetBarcode.GetId(), self.ReadBarcode)
        EVT_BUTTON(self, self.GetStopwatch.GetId(), self.ReadStopWatch)
        # end wxGlade

        #Device details
        self.serial_no = '000000'
        self.sw_ver = None
        self.os_vers = None
        self.DATE_LENGTH = 14
        self.start_time = 0

    def __set_properties(self):
        # begin wxGlade: ParkRunFrame.__set_properties
        self.SetTitle(_("Run Results Processor"))
        self.SetSize((530, 267))
        self.ParkRunAppFrame_statusbar.SetStatusWidths([-1])
        # statusbar fields
        ParkRunAppFrame_statusbar_fields = [_("ParkRunAppFrame_statusbar")]
        for i in range(len(ParkRunAppFrame_statusbar_fields)):
            self.ParkRunAppFrame_statusbar.SetStatusText(ParkRunAppFrame_statusbar_fields[i], i)
        self.label_1.SetBackgroundColour(wxColour(255, 180, 189))
        self.GetTimer.SetBackgroundColour(wxColour(146, 91, 35))
        self.GetTimer.SetForegroundColour(wxColour(136, 180, 44))
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: ParkRunFrame.__do_layout
        self.sizer_1 = wxBoxSizer(wxVERTICAL)
        PR_Controls = wxGridSizer(3, 3, 1, 0)
        self.sizer_1.Add(self.label_1, 0, 0, 0)
        PR_Controls.Add(self.GetTimer, 0, wxALL | wxALIGN_CENTER_HORIZONTAL | wxALIGN_CENTER_VERTICAL, 0)
        PR_Controls.Add(self.label_2, 0, wxALIGN_RIGHT | wxALIGN_CENTER_VERTICAL, 0)
        PR_Controls.Add(self.text_ctrl_records, 0, wxALL | wxALIGN_RIGHT | wxALIGN_CENTER_HORIZONTAL | wxALIGN_CENTER_VERTICAL, 5)
        PR_Controls.Add(self.GetBarcode, 0, wxALL | wxALIGN_CENTER_HORIZONTAL | wxALIGN_CENTER_VERTICAL, 0)
        PR_Controls.Add(self.label_3, 0, wxALL | wxALIGN_RIGHT | wxALIGN_CENTER_VERTICAL, 0)
        PR_Controls.Add(self.text_ctrl_2, 0, wxALIGN_CENTER_HORIZONTAL | wxALIGN_CENTER_VERTICAL, 0)
        PR_Controls.Add(self.GetStopwatch, 0, wxALL | wxALIGN_CENTER_HORIZONTAL | wxALIGN_CENTER_VERTICAL, 0)
        PR_Controls.Add(self.label_5, 0, wxALIGN_RIGHT | wxALIGN_CENTER_VERTICAL, 0)
        PR_Controls.Add(self.text_ctrl_4, 0, wxALIGN_CENTER_HORIZONTAL | wxALIGN_CENTER_VERTICAL, 0)
        self.sizer_1.Add(PR_Controls, 1, wxEXPAND, 1)
        self.SetSizer(self.sizer_1)
        self.Layout()
        # end wxGlade

    def _remove_all(self, substr, str):
        index = 0
        length = len(substr)
        while string.find(str, substr) != -1:
            index = string.find(str, substr)
            str = str[0:index] + str[index+length:]
        return str

    def _timer_get_sn(self, device):
        cmd = self.serial_no +'|GPOLL'
        ser_no = device.interrogate_timer(cmd)
        while '|' in ser_no: ser_no.remove('|')
        ser_no = ''.join(ser_no)
        self.serial_no = ser_no
        return ser_no

    def _timer_get_params(self, device, cmd):
        cmd = self.serial_no + cmd

        os_vers = device.interrogate_timer(cmd)
        while '|' in os_vers: os_vers.remove('|')

        os_vers = ''.join(os_vers)
        # strip out serial number from returned string
        os_vers = self._remove_all(self.serial_no, os_vers)
        return os_vers

    def _timer_get_data(self, device, cmd):
        cmd = self.serial_no + cmd
        data = device.interrogate_timer(cmd)
        _length = len(data)

        if _length > 10:
            while '|' in data: data.remove('|')
            data = ''.join(data)
            data = self._remove_all(self.serial_no, data)
        else:
            data = ""
        return data

    def _make_time(self, time_str):
        return time_str[0:2] + ":" +time_str[2:4] + ":" + time_str[4:6]

    def _make_date(self, idx, buffr):
        return buffr[idx+1: idx+3] + "/" + buffr[idx+3: idx+5] + "/" + buffr[idx+5: idx+9] + " " + self._make_time(buffr[idx+9: idx+15])

    def _get_time(self, time_str):
        _time = datetime.datetime.strptime(time_str, '%H:%M:%S').time()
        return _time

    def _create_hdr(self, idx, buffr):
        """ Create the first line of the file """
        _date = self._make_date(idx, buffr)
        _hdr = "STARTOFEVENT" + "," + _date + ","+ self.serial_no +"\n"
        return _hdr

    def _create_footer(self, idx, buffr):
        """ Create the last line of the file """
        _date = self._make_date(idx, buffr)
        _footer = "ENDOFEVENT" + "," + _date
        return _footer

    def _create_record(self, idx, buffr):

        _marker_posn = buffr.find('~', idx, idx+15)
        _fin_posn = buffr[idx+1:_marker_posn]
        _record = _fin_posn + ","  + self._make_date(_marker_posn, buffr)
        _fin_time = self._make_time(buffr[_marker_posn+9:_marker_posn+15])

        if _fin_posn == '0':
            self.start_time = self._get_time(self._make_time(buffr[_marker_posn+9:_marker_posn+15]))
            _record = _record + '\n'
        elif _fin_posn == 'ENDOFEVENT':
            _marker_posn = len(buffr) + self.DATE_LENGTH
        else:
            delta = datetime.datetime.combine(datetime.date.min, self._get_time(_fin_time))- datetime.datetime.combine(datetime.date.min, self.start_time)
            _record = _record + "," + str(delta) + '\n'

        return _record, _marker_posn

    def _write_data_to_timer_file(self, buff):

        now = datetime.datetime.now()

        filename = "parkrun_timer_" + now.strftime("%d%m%Y%H%M%S") + ".txt"
        f = open(filename, "w")
        _idx = buff.index('~')
        # create header lies & add to timer results file
        _file_hdr = self._create_hdr(_idx, buff)
        f.write(_file_hdr)

        # get the remaining records and append to file
        while _idx < len(buff):
            _idx = _idx + self.DATE_LENGTH
            _rec, _idx = self._create_record(_idx, buff)
            f.write(_rec)

        f.close()


    def ReadTimer(self, event):  # wxGlade: ParkRunFrame.<event_handler>
        ser_no = " "

        self.ParkRunAppFrame_statusbar.SetStatusText("Waiting for timer")

        timer = myCS1504(serial_port)

        sParkRunAppFrame_statusbarer_no = 0

        ser_no = self._timer_get_sn(timer)
        os_vers = self._timer_get_params(timer, '|GETOS')
        sw_vers = self._timer_get_params(timer, '|GETSW')
        bat_level = self._timer_get_params(timer, '|GETBATT')
        rc = self._timer_get_params(timer, '|GETRC')

        self.text_ctrl_records.WriteText(rc)

        fs = self._timer_get_params(timer, '|GETFS')

        rec_buff = self._timer_get_data(timer, '|READALL')

        with open("Output.txt", "w") as text_file:
            text_file.write(rec_buff)

        if ser_no != " ":
            _device = "Serial No.: " + self.serial_no + "  | S/W Vers: " + sw_vers + "  | OS Vers: " + os_vers
            self.ParkRunAppFrame_statusbar.SetStatusText(_device, sParkRunAppFrame_statusbarer_no)

        self._write_data_to_timer_file(rec_buff)
        event.Skip()


    def ReadBarcode(self, event):  # wxGlade: ParkRunFrame.<event_handler>
        now = datetime.datetime.now()
        print now.strftime("%d%m%Y%H%M%S")
        filename = "parkrun_barcode_" + now.strftime("%d%m%Y%H%M%S") + ".txt"
        f = open(filename, "w")
        
        self.ParkRunAppFrame_statusbar.SetStatusText("Waiting for scanner")

        scanner = myCS1504(serial_port)
        ser_no = scanner.interrogate()
        barcodes = scanner.get_barcodes()
        _count = 0

        for symbology, code, timestamp in barcodes:

            if (code.find("A") != -1):
                _athlete = code

            if (code.find("P") != -1):
                f.write(_athlete + ',' + code + "," + timestamp.strftime('%d') +  "/"  + timestamp.strftime('%m') +  "/" + timestamp.strftime('%Y ') +  timestamp.strftime('%X') + "\n")
                _count = _count + 1

        self.text_ctrl_2.AppendText(str(_count))
        sParkRunAppFrame_statusbarer_no = 0
        self.ParkRunAppFrame_statusbar.SetStatusText("Device:")
        
        f.close()
        event.Skip()


    def ReadStopWatch(self, event):  # wxGlade: ParkRunFrame.<event_handler>
        print "Event handler 'GetStopWatch' not implemented!"
        event.Skip()


# end of class ParkRunFrame
class MyApp(wxApp):
    def OnInit(self):
        wxInitAllImageHandlers()
        ParkRunAppFrame = ParkRunFrame(None, wxID_ANY, "")
        self.SetTopWindow(ParkRunAppFrame)
        ParkRunAppFrame.Show()
        return 1

# end of class MyApp


if sys.platform == 'darwin':
  serial_port = '/dev/cu.usbserial'
elif sys.platform == 'linux2':
  serial_port = '/dev/ttyUSB0'
elif sys.platform == 'win32':
  # this port varies from PC to PC
  serial_port = 'COM8'
else:
  serial_port = 0

if __name__ == "__main__":
    gettext.install("app") # replace with the appropriate catalog name

    app = MyApp(0)

    app.MainLoop()
